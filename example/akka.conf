db.default {
    # Default connection string that's referenced from other locations
    connection-string = "Server=.;Initial Catalog=example;User Id=sa;Password=YourStrong!Passw0rd"
}

# Akka Configuration
#
# Note: Everything in this 'akka' section is pure Akka
# configuration that you can reference from the online
# documentation here:
# https://getakka.net/articles/configuration/akka.html

akka {
    actor {
        provider = cluster
        # Logging flags for Akka internal event types
        debug {
            receive = off            # log any received message
            autoreceive = off        # log automatically received messages, e.g. PoisonPill
            lifecycle = off          # log actor lifecycle changes
            event-stream = off       # log subscription changes for Akka.NET event stream
            unhandled = off          # log unhandled messages sent to actors
        }
    }

    # Optional - enable a custom logger interface
    # loggers = [ "wyvern.utils.DotNetCoreLogger, wyvern.api" ]

    logger-startup-timeout = 60s              # Logger startup timeout
    loglevel = INFO                            # Default Log level

    # Akka persistence configuration
    # (see, https://getakka.net/articles/configuration/akka.persistence.html)
    persistence {
        # Specification for EventJournal persistence
	    journal {
	        plugin = "akka.persistence.journal.sql-server"
		    sql-server {
			    class = "Akka.Persistence.SqlServer.Journal.SqlServerJournal, Akka.Persistence.SqlServer"
			    plugin-dispatcher = "akka.actor.default-dispatcher"
			    connection-string = ${db.default.connection-string}
			    connection-timeout = 1s
			    schema-name = dbo
			    table-name = EventJournal
			    auto-initialize = on
			    timestamp-provider = "Akka.Persistence.Sql.Common.Journal.DefaultTimestampProvider, Akka.Persistence.Sql.Common"
			    metadata-table-name = Metadata
		    }
	    }
        # Configuration for the journal reader that produces event streams
        query.journal.sql {
            class = "Akka.Persistence.Query.Sql.SqlReadJournalProvider, Akka.Persistence.Query.Sql"
            write-plugin = ""           # Uses plugin of journal by default
            refresh-interval = 500ms    # Polling interval to check for new events
            max-buffer-size = 200       # Number of events to return from the database
        }
        # Specification for the SnapshotStore persistence
	    snapshot-store {
	        plugin = "akka.persistence.snapshot-store.sql-server"
		    sql-server {
			    class = "Akka.Persistence.SqlServer.Snapshot.SqlServerSnapshotStore, Akka.Persistence.SqlServer"
			    plugin-dispatcher = "akka.actor.default-dispatcher"
			    connection-string = ${db.default.connection-string}
			    connection-timeout = 1s
			    schema-name = dbo
			    table-name = SnapshotStore
			    auto-initialize = on
		    }
	    }
    }

    # Network configuration for this seed/node
    remote {
        dot-netty.tcp {
            # Hostname or IP Address to for the process to bind to
            hostname = 127.0.0.1
            # Port for the process to bind to (for seed, set to 0 for random)
            port = 7000
            # Public hostname if running behind NAT
            public-hostname = "localhost"
        }
    }
    cluster {
        # List of seed nodes for this cluster (can point to self for
        # single node cluster)
        seed-nodes = ["akka.tcp://ClusterSystem@localhost:7000"]
        roles = [ "default" ]
    }
}

# Wyvern Configuration
#
# Note: Everything in here is core to the framework,
# It may follow the Akka conventions, but is a custom
# set of configurations that relate to how everything
# fits together.
wyvern {

    # Option to explicitly self-join the seed to itself
    cluster.join-self = on

    # Service Bus Configuration for Topics
    broker.servicebus {
        client {
            default {
                # Option to use AMQP with SSL (true) or not (false)
                useAmqps = false # must be true for Azure service bus, false for ActiveMQ
                # Host name of the AMQP server
                host = "localhost"
                # Username for the AMQP connection
                username = "guest"
                # Password for the AMQP connection
                password = "guest"
                # Password for the AMQP connection
                entity = "wyvern-example"
                # Back-off configuration for service bus connection failure
                failure-exponential-backoff {
                    min = 3s
                    max = 30s
                    random-factor = 0.2
                }
            }
            # Reference to client configuration
            producer = ${wyvern.broker.servicebus.client.default}
            # Run the topic publisher on the nodes with this role
            producer.role = ""
        }
    }

    # Persistence configuration
    persistence {

        ask-timeout = 5s                    # Entity actor timeout for receiving events
        snapshot-after = 100                # Take a snapshot after 'n' events
        passivate-after-idle-timeout = 0    # Passivate an actor after timespan
        run-entities-on-role = ""    # Run the entities on nodes with this role
        max-number-of-shards = 10           # Maximum number of shards to run on cluster

        cluster.distribution {
            # Heartbeat interval from supervisor
            ensure-active-interval = 1s
        }

        # SQL Server configuration for topics readside
        sqlserver {
            create-tables {
                auto = true
                timeout = 20s
                run-on-role = ""
                failure-exponential-backoff {
                    min = 3s
                    max = 30s
                    random-factor = 0.2
                }
            }
        }

        # Read side configuration for the topics message broker
        read-side {
            # Run the read side processor on nodes with this role
            run-on-role = ""
            # Offset tracking table for the topics read side offsets
            sqlserver {
                tables {
                    # Specifications for the offset table used by the topic publisher
                    offset {
                        tableName = "broker_read_side_offsets"
                        schemaName = ""
                        columnNames {
                            readSideId = "read_side_id"
                            tag = "tag"
                            sequenceOffset = "sequence_offset"
                            timeUuidOffset = "time_uuid_offset"
                        }
                    }
                }
            }
        }

        # Connection string for the ingestion phase at initial state
        # of an entity
        ingestion {
            connection-string = ${db.default.connection-string}
        }
    }
}

